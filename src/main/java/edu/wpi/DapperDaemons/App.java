package edu.wpi.DapperDaemons;

import edu.wpi.DapperDaemons.backend.*;
import edu.wpi.DapperDaemons.backend.loadingScreen.LoadingScreen;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import java.util.Properties;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Slf4j
public class App extends Application {
  private static final String brighamIMG =
      "file:src/main/resources/edu/wpi/DapperDaemons/assets/Brigham-Blurred.jpg";
  // Do not edit this file when implementing your UI design

  public static Logger LOG;

  @Override
  public void init() {
    createLogger();
    log.info("Starting Up");
  }

  @Override
  public void start(Stage primaryStage) {
    //    CSVLoader.resetFirebase();
    //    startNoLoadingScreen(primaryStage);
    startWithLoadingScreen(primaryStage);
  }

  private void startWithLoadingScreen(Stage primaryStage) {
    //    FireBase.init();
    //    try {
    //      DAOPouch.init();
    //    } catch (IOException e) {
    //      System.out.println("Could not initialize DAOPouch");
    //    }
    //        Thread.sleep(10000);
    //        System.out.println();

    LoadingScreen ls = new LoadingScreen(primaryStage);
    try {
      ls.display(
          () -> {
            FireBase.init();
            try {
              DAOPouch.init();
            } catch (IOException e) {
              throw new RuntimeException(e);
            }
            AutoSave.start(10);
            try {
              Thread.sleep(2000);
            } catch (InterruptedException e) {
              throw new RuntimeException(e);
            }
          },
          () -> {
            Parent root = null;
            try {
              root =
                  FXMLLoader.load(
                      Objects.requireNonNull(getClass().getResource("views/login.fxml")));
            } catch (IOException e) {
              e.printStackTrace();
            }
            Scene scene = new Scene(root);
            primaryStage.setMinWidth(635);
            primaryStage.setMinHeight(510);
            primaryStage.setScene(scene);
            primaryStage.show();
            primaryStage
                .getIcons()
                .add(
                    new Image(
                        String.valueOf(
                            App.class.getResource(
                                "assets/" + "Brigham_and_Womens_Hospital_logo.png"))));
            primaryStage.setTitle("BWH");
          });
    } catch (IOException e) {
      System.out.println("Loading Screen broke :(");
    }
  }

  private void startNoLoadingScreen(Stage primaryStage) {
    FireBase.init();
    try {
      DAOPouch.init();
    } catch (IOException e) {
      System.out.println("Could not initialize DAOPouch");
    }
    AutoSave.start(10);
    //    CSVLoader.resetFirebase();
    Parent root = null;
    try {
      root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("views/login.fxml")));
    } catch (IOException e) {
      e.printStackTrace();
    }
    Scene scene = new Scene(root);
    primaryStage.setMinWidth(635);
    primaryStage.setMinHeight(510);
    primaryStage.setScene(scene);
    primaryStage.show();
    primaryStage
        .getIcons()
        .add(
            new Image(
                String.valueOf(
                    App.class.getResource("assets/" + "Brigham_and_Womens_Hospital_logo.png"))));
    primaryStage.setTitle("BWH");
  }

  private void createLogger() {
    try {
      File logDir = new File(getClass().getClassLoader().getResource("logs").getPath());
      if (!logDir.exists()) logDir.mkdirs();

      Properties properties = new Properties();
      InputStream propFile =
          getClass().getClassLoader().getResourceAsStream("simplelogger.properties");
      properties.load(propFile);
    } catch (IOException e) {
      e.printStackTrace();
    }

    LOG = LoggerFactory.getLogger(App.class);
    LOG.info("TESTING LOG FILE");
  }

  @Override
  public void stop() {
    log.info("Shutting Down");
  }
}
